name: Build and Release

on:
  workflow_dispatch:

  release:
    types: [published]

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        # Define the OS and architecture combinations
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        include:
          # For Android ARM 8 (added in your original build.sh as a specific case)
          - goos: android
            goarch: arm64
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Show workflow information
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'

      - name: Download Project dependencies
        run: go mod download

      - name: Build the application
        run: |
          mkdir -p build_assets
          go build -v -o build_assets/xray-knife -tags="with_gvisor,with_quic,with_wireguard,with_ech,with_utls,with_clash_api,with_grpc" -ldflags "-s -w -buildid="

      - name: Rename Windows binary
        if: matrix.goos == 'windows'
        run: |
          mv ./build_assets/xray-knife ./build_assets/xray-knife.exe

      - name: Copy README.md & LICENSE
        run: |
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE

      - name: Create ZIP archive
        shell: bash
        run: |
          pushd build_assets || exit 1
          touch -mt $(date +%Y01010000) *
          zip -9vr ../Xray-knife-${{ env.ASSET_NAME }}.zip .
          popd || exit 1
          FILE=./Xray-knife-${{ env.ASSET_NAME }}.zip
          DGST=$FILE.dgst
          for METHOD in md5 sha1 sha256 sha512
          do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Rename build directory
        run: |
          mv build_assets Xray-knife-${{ env.ASSET_NAME }}

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Xray-knife-${{ env.ASSET_NAME }}
          path: ./Xray-knife-${{ env.ASSET_NAME }}/*

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./Xray-knife-${{ env.ASSET_NAME }}.zip*
          tag: ${{ github.ref }}
          file_glob: true